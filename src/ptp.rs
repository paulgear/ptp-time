/* automatically generated by rust-bindgen 0.66.1 */

#![allow(dead_code, non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const PTP_ENABLE_FEATURE: u32 = 1;
pub const PTP_RISING_EDGE: u32 = 2;
pub const PTP_FALLING_EDGE: u32 = 4;
pub const PTP_STRICT_FLAGS: u32 = 8;
pub const PTP_EXTTS_EDGES: u32 = 6;
pub const PTP_EXTTS_VALID_FLAGS: u32 = 15;
pub const PTP_EXTTS_V1_VALID_FLAGS: u32 = 7;
pub const PTP_PEROUT_ONE_SHOT: u32 = 1;
pub const PTP_PEROUT_DUTY_CYCLE: u32 = 2;
pub const PTP_PEROUT_PHASE: u32 = 4;
pub const PTP_PEROUT_VALID_FLAGS: u32 = 7;
pub const PTP_PEROUT_V1_VALID_FLAGS: u32 = 0;
pub const PTP_MAX_SAMPLES: u32 = 25;
pub const PTP_CLK_MAGIC: u8 = 61u8;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ptp_clock_time {
    pub sec: __s64,
    pub nsec: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ptp_clock_time() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_clock_time> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_clock_time>(),
        16usize,
        concat!("Size of: ", stringify!(ptp_clock_time))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_clock_time>(),
        8usize,
        concat!("Alignment of ", stringify!(ptp_clock_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_time),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_time),
            "::",
            stringify!(nsec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_time),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ptp_clock_caps {
    pub max_adj: ::std::os::raw::c_int,
    pub n_alarm: ::std::os::raw::c_int,
    pub n_ext_ts: ::std::os::raw::c_int,
    pub n_per_out: ::std::os::raw::c_int,
    pub pps: ::std::os::raw::c_int,
    pub n_pins: ::std::os::raw::c_int,
    pub cross_timestamping: ::std::os::raw::c_int,
    pub adjust_phase: ::std::os::raw::c_int,
    pub max_phase_adj: ::std::os::raw::c_int,
    pub rsv: [::std::os::raw::c_int; 11usize],
}
#[test]
fn bindgen_test_layout_ptp_clock_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_clock_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_clock_caps>(),
        80usize,
        concat!("Size of: ", stringify!(ptp_clock_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_clock_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ptp_clock_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_adj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(max_adj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_alarm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(n_alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_ext_ts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(n_ext_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_per_out) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(n_per_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(pps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_pins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(n_pins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cross_timestamping) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(cross_timestamping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjust_phase) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(adjust_phase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_phase_adj) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(max_phase_adj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_clock_caps),
            "::",
            stringify!(rsv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ptp_extts_request {
    pub index: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub rsv: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_ptp_extts_request() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_extts_request> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_extts_request>(),
        16usize,
        concat!("Size of: ", stringify!(ptp_extts_request))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_extts_request>(),
        4usize,
        concat!("Alignment of ", stringify!(ptp_extts_request))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_request),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_request),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_request),
            "::",
            stringify!(rsv)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptp_perout_request {
    pub __bindgen_anon_1: ptp_perout_request__bindgen_ty_1,
    pub period: ptp_clock_time,
    pub index: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub __bindgen_anon_2: ptp_perout_request__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptp_perout_request__bindgen_ty_1 {
    pub start: ptp_clock_time,
    pub phase: ptp_clock_time,
}
#[test]
fn bindgen_test_layout_ptp_perout_request__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_perout_request__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_perout_request__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ptp_perout_request__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_perout_request__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ptp_perout_request__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request__bindgen_ty_1),
            "::",
            stringify!(phase)
        )
    );
}
impl Default for ptp_perout_request__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptp_perout_request__bindgen_ty_2 {
    pub on: ptp_clock_time,
    pub rsv: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_ptp_perout_request__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_perout_request__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_perout_request__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(ptp_perout_request__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_perout_request__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ptp_perout_request__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request__bindgen_ty_2),
            "::",
            stringify!(on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request__bindgen_ty_2),
            "::",
            stringify!(rsv)
        )
    );
}
impl Default for ptp_perout_request__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ptp_perout_request() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_perout_request> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_perout_request>(),
        56usize,
        concat!("Size of: ", stringify!(ptp_perout_request))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_perout_request>(),
        8usize,
        concat!("Alignment of ", stringify!(ptp_perout_request))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_perout_request),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for ptp_perout_request {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptp_sys_offset {
    pub n_samples: ::std::os::raw::c_uint,
    pub rsv: [::std::os::raw::c_uint; 3usize],
    pub ts: [ptp_clock_time; 51usize],
}
#[test]
fn bindgen_test_layout_ptp_sys_offset() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_sys_offset> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_sys_offset>(),
        832usize,
        concat!("Size of: ", stringify!(ptp_sys_offset))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_sys_offset>(),
        8usize,
        concat!("Alignment of ", stringify!(ptp_sys_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_samples) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset),
            "::",
            stringify!(n_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset),
            "::",
            stringify!(rsv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset),
            "::",
            stringify!(ts)
        )
    );
}
impl Default for ptp_sys_offset {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ptp_sys_offset_extended {
    pub n_samples: ::std::os::raw::c_uint,
    pub rsv: [::std::os::raw::c_uint; 3usize],
    pub ts: [[ptp_clock_time; 3usize]; 25usize],
}
#[test]
fn bindgen_test_layout_ptp_sys_offset_extended() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_sys_offset_extended> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_sys_offset_extended>(),
        1216usize,
        concat!("Size of: ", stringify!(ptp_sys_offset_extended))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_sys_offset_extended>(),
        8usize,
        concat!("Alignment of ", stringify!(ptp_sys_offset_extended))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_samples) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_extended),
            "::",
            stringify!(n_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_extended),
            "::",
            stringify!(rsv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_extended),
            "::",
            stringify!(ts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ptp_sys_offset_precise {
    pub device: ptp_clock_time,
    pub sys_realtime: ptp_clock_time,
    pub sys_monoraw: ptp_clock_time,
    pub rsv: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_ptp_sys_offset_precise() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_sys_offset_precise> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_sys_offset_precise>(),
        64usize,
        concat!("Size of: ", stringify!(ptp_sys_offset_precise))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_sys_offset_precise>(),
        8usize,
        concat!("Alignment of ", stringify!(ptp_sys_offset_precise))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_precise),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_realtime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_precise),
            "::",
            stringify!(sys_realtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_monoraw) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_precise),
            "::",
            stringify!(sys_monoraw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_sys_offset_precise),
            "::",
            stringify!(rsv)
        )
    );
}
pub const ptp_pin_function_PTP_PF_NONE: ptp_pin_function = 0;
pub const ptp_pin_function_PTP_PF_EXTTS: ptp_pin_function = 1;
pub const ptp_pin_function_PTP_PF_PEROUT: ptp_pin_function = 2;
pub const ptp_pin_function_PTP_PF_PHYSYNC: ptp_pin_function = 3;
pub type ptp_pin_function = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptp_pin_desc {
    pub name: [::std::os::raw::c_char; 64usize],
    pub index: ::std::os::raw::c_uint,
    pub func: ::std::os::raw::c_uint,
    pub chan: ::std::os::raw::c_uint,
    pub rsv: [::std::os::raw::c_uint; 5usize],
}
#[test]
fn bindgen_test_layout_ptp_pin_desc() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_pin_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_pin_desc>(),
        96usize,
        concat!("Size of: ", stringify!(ptp_pin_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_pin_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(ptp_pin_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_pin_desc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_pin_desc),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_pin_desc),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_pin_desc),
            "::",
            stringify!(chan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_pin_desc),
            "::",
            stringify!(rsv)
        )
    );
}
impl Default for ptp_pin_desc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ptp_extts_event {
    pub t: ptp_clock_time,
    pub index: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub rsv: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_ptp_extts_event() {
    const UNINIT: ::std::mem::MaybeUninit<ptp_extts_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ptp_extts_event>(),
        32usize,
        concat!("Size of: ", stringify!(ptp_extts_event))
    );
    assert_eq!(
        ::std::mem::align_of::<ptp_extts_event>(),
        8usize,
        concat!("Alignment of ", stringify!(ptp_extts_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_event),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_event),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_event),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ptp_extts_event),
            "::",
            stringify!(rsv)
        )
    );
}
